//
// Created by pushyamik on 10/7/18.
//

#include <cstdint>

#ifndef LAB1_CS7610_MESSAGES_H
#define LAB1_CS7610_MESSAGES_H

#endif //LAB1_CS7610_MESSAGES_H

typedef struct {
    uint32_t type; // must be equal to 1
    uint32_t sender; // the senderâ€™s id
    uint32_t msg_id; // the identifier of the message generated by the sender
    uint32_t data; // a dummy integer
} DataMessage;
typedef struct {
    uint32_t type; // must be equal to 2
    uint32_t sender; // the sender of the DataMessage
    uint32_t msg_id; // the identifier of the DataMessage generated by the sender
    uint32_t proposed_seq; // the proposed sequence number
    uint32_t proposer;
// the process id of the proposer
} AckMessage;
typedef struct {
    uint32_t type; // must be equal to 3
    uint32_t sender; // the sender of the DataMessage
    uint32_t msg_id; // the identifier of the DataMessage generated by the sender
    uint32_t final_seq; // the final sequence number selected by the sender
    uint32_t final_seq_proposer; // the process id of the proposer who proposed the final_seq
} SeqMessage;

typedef struct {
    uint32_t msg_id;
    uint32_t final_seq;
    bool deliver;
} Mesg_pq;

// this is an strucure which implements the
// operator overlading
struct CompareDataMessage {
    bool operator()(DataMessage const& p1, DataMessage const& p2)
    {
        // return "true" if "p1" is ordered
        // before "p2", for example:
        return p1.msg_id > p2.msg_id;
    }
};
struct CompareMessage {
    bool operator()(Mesg_pq const& p1, Mesg_pq const& p2)
    {
        // return "true" if "p1" is ordered
        // before "p2", for example:
        return p1.final_seq > p2.final_seq;
    }
};